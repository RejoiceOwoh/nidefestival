datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model
model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String?
  role     String  @default("user") // user or admin
  orders   Order[]
}

// Product model
model Product {
  id                   Int     @id @default(autoincrement())
  name                 String
  description          String?
  price                Float // Price for one bottle
  stock                Int     @default(100) // Total available stock
  baseShippingCost     Float? // Only keeping base shipping cost; calculate discounted shipping in the backend
  discountPricePerUnit Float? // Discounted price unit
  bulkThreshold        Int?
  bulkShippingCost     Float?
  palletShippingCost   Float?
  maxCap               Int?    @default(100) // Max quantity a user can order
  soldOut              Boolean @default(false) // If true, the product is sold out
  imageUrl             String  @default("") // Default is an empty string for existing products

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Back relation to OrderProduct
  orderProducts OrderProduct[] // A product can be in multiple orders
}

// Order model
model Order {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])

  products  OrderProduct[] // An order can have multiple products
  createdAt DateTime       @default(now())
  status    String         @default("pending") // pending, shipped, delivered
}

// Join table between Order and Product
model OrderProduct {
  id        Int @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int @default(1) // Quantity of product in the order

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}
